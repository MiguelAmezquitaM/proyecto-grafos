/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import datos.Ciudad;
import datos.Viaje;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;

import javax.swing.*;

import grafo.Grafo;
import grafo.GrafoD;
import gui.util.Vector2D;

/**
 * @author david
 */
public class MainFrame extends javax.swing.JFrame {

    private final Grafo<Ciudad, Viaje>  grafo = new GrafoD<>();

    Graphics2D graphics2D;
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        // Variables declaration - do not modify
        JPanel canvas = new JPanel();

        setTitle("Proyecto grafos");
        setResizable(false);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setLayout(new BoxLayout(getContentPane(), BoxLayout.Y_AXIS));
        setPreferredSize(new java.awt.Dimension(1280, 720));
        setBackground(new java.awt.Color(19, 141, 117, 255));

        canvas.setLayout(new BoxLayout(canvas, BoxLayout.Y_AXIS));
        canvas.setLocation(new Point(0, 0));
        canvas.setBackground(new java.awt.Color(30, 132, 73));
        canvas.setPreferredSize(new Dimension(1280, 720));

        graphics2D = (Graphics2D) getGraphics();

        MouseAdapter ml = new MyMouseListener(canvas, grafo);
        canvas.addMouseListener(ml);
        canvas.addMouseMotionListener(ml);

        GroupLayout canvasLayout = new GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
                canvasLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 912, Short.MAX_VALUE)
        );
        canvasLayout.setVerticalGroup(
                canvasLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGap(0, 544, Short.MAX_VALUE)
        );

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(canvas, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(340, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(canvas, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 160, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>                        


    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | UnsupportedLookAndFeelException | IllegalAccessException | InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            var f = new MainFrame();
            f.setVisible(true);
        });
    }

    // End of variables declaration
}


class MyMouseListener extends MouseAdapter {
    Ciudad selected = null;
    Rectangle r = new Rectangle(30, 30);

    private final Grafo<Ciudad, Viaje> grafo;
    private int n = 0;
    int nodo1 = -1, nodo2 = -1;
    boolean mov;
    int disX = 0;
    int disY = 0;
    Rectangle rectangulo = new Rectangle(30, 30);
    JPanel panel;
    Graphics2D g;

    public MyMouseListener(JPanel panel, Grafo<Ciudad, Viaje> grafo) {
        this.grafo = grafo;
        this.panel = panel;
        g = (Graphics2D) this.panel.getGraphics();
    }

    @Override
    public void mouseClicked(java.awt.event.MouseEvent evt) {
        g = (Graphics2D) panel.getGraphics();
        if (evt.getButton() == 1) {
            boolean haynodo = false;
            for (int i = 0; i < grafo.orden(); i++) {
                var dato = grafo.getVertice(i);
                var p = dato.getPosition();
                rectangulo.x = p.x;
                rectangulo.y = p.y;
                if (rectangulo.contains(evt.getX(), evt.getY())) {
                    Lienzo.clickSobreNodo(g, p.x, p.y, Color.green, dato.getNombre());
                    haynodo = true;
                    n++;
                    if (nodo1 == -1 && nodo2 == -1) {
                        nodo1 = i;
                    } else {
                        nodo2 = i;
                    }
                }
            }
            if (!haynodo) {
                String nombre = JOptionPane.showInputDialog("Nombre de la ciudad: ");
                String pais = JOptionPane.showInputDialog("Nombre del pais: ");
                grafo.addVertice(new Ciudad(nombre, pais, new Vector2D(evt.getX(), evt.getY())));
                Lienzo.pintarCirculo(g, nombre, evt.getX(), evt.getY());
            }
            if (n == 2) {
                double costo, distancia; int tiempo;
                try {
                    costo = Double.parseDouble(JOptionPane.showInputDialog("Costo: "));
                    distancia = Double.parseDouble(JOptionPane.showInputDialog("Distancia: "));
                    tiempo = Integer.parseInt(JOptionPane.showInputDialog("Tiempo: "));
                } catch (Exception e) {
                    return;
                }
                grafo.addCosto(nodo1, nodo2, new Viaje(costo, distancia, tiempo));
                Lienzo.modified.add(nodo1);
                Lienzo.modified.add(nodo2);

                nodo1 = nodo2 = -1;
                n = 0;

                Lienzo.limpiar(g, panel);
                Lienzo.dibujarGrafo(g, grafo);
            }
        }
    }

    @Override
    public void mousePressed(MouseEvent e) {
        for (int i = 0; i < grafo.orden(); ++i) {
            var c = grafo.getVertice(i);
            var cp = c.getPosition();
            r.x = cp.x; r.y = cp.y;
            if (r.contains(e.getPoint())) {
                selected = c;
                return;
            }
        }
        selected = null;
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        selected = null;
    }

    @Override
    public void mouseDragged(MouseEvent e) {
        if (selected == null) return;

        int index = -1;
        for (int i = 0; i < grafo.orden(); ++i) {
            if (grafo.getVertice(i).equals(selected)) index = i;
        }
        if (index == -1) return;

        selected.setPosition(new Vector2D(e.getX(), e.getY()));
        Lienzo.modified.add(index);
        Lienzo.limpiar(g, panel);
        Lienzo.dibujarGrafo(g, grafo);
    }
}